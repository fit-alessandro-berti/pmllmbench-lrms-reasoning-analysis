[
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "To solve for this, we need to identify cases where the sequence of activities 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order' appears consecutively such that there is no other event for the same `case_id` in between these three activities. Additionally, the time elapsed between 'Create Order' and 'Confirm Order' should be more than 5 days for those cases. We need to exclude any events from such cases from the final result set."
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "This reasoning leads us to a few steps: 1. For each case, identify if there is a sequence where 'Approve Purchase Requisition' is followed by 'Create Order' which in turn is followed by 'Confirm Order' with no other activities in between. This requires us to order events within each case based on their `timestamp`. 2. For such cases where this sequence exists, check if the time between the 'Create Order' and 'Confirm Order' events is more than 5 days. 3. Return all events from cases where either: - The specified sequence does not appear consecutively. - The specified sequence appears consecutively, but the time between 'Create Order' and 'Confirm Order' is 5 days or less."
  },
  {
    "Name": "Pattern Recognition - PE",
    "Text": "First, let us identify the ordered sequence of events within each `case_id`. We need to use window functions such as `LEAD` and `LAG` to check for the next and previous activities (and timestamps) based on the timestamp order."
  },
  {
    "Name": "Heuristic Reasoning - PE",
    "Text": "By using the `LEAD` function twice (once for the next row and once for the row after that), we can check if a row with `activity` equal to 'Approve Purchase Requisition' is followed by a row where `activity` is 'Create Order' which is in turn followed by a row where `activity` is 'Confirm Order'. Additionally, if such a sequence is found, we need to check that the `timestamp` difference between 'Create Order' (second row in the sequence) and 'Confirm Order' (third row in the sequence) is more than 5 days."
  },
  {
    "Name": "Inductive Reasoning - PE",
    "Text": "Let us construct a query that identifies such cases where the described sequence appears consecutively and the time between 'Create Order' and 'Confirm Order' is more than 5 days."
  },
  {
    "Name": "Validation - IND",
    "Text": "However, a more common and efficient way to solve this might be by using the `LEAD` window function. This allows us to check subsequent rows within a single row, which makes it a bit more compact."
  },
  {
    "Name": "Pattern Recognition - PE",
    "Text": "1. `ordered_events` CTE uses `LEAD` to get the next activity and timestamp (`next_activity` and `next_timestamp`) and the one after that (`next_next_activity` and `next_next_timestamp`)."
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "2. `cases_to_exclude` CTE filters the `ordered_events` to find rows where the activity sequence is 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' in that order (i.e., `activity` is 'Approve Purchase Requisition', `next_activity` is 'Create Order', and `next_next_activity` is 'Confirm Order'). Additionally, it checks if the time between `next_timestamp` ('Create Order' event) and `next_next_timestamp` ('Confirm Order' event) is greater than 5 days."
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "3. The main query selects all events from `event_log` where `case_id` is not in the `cases_to_exclude` CTE."
  },
  {
    "Name": "Conclusion - C"
  }
]