[
  {
    "Name": "Pattern Recognition - PE",
    "Text": "To solve for this we need to identify cases where the sequence of activities Approve Purchase Requisition  Create Order  Confirm Order appears consecutively such that there is no other event for the same caseid in between these three activities Additionally the time elapsed between Create Order and Confirm Order should be more than 5 days for those cases We need to exclude any events from such cases from the final result set"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "This reasoning leads us to a few steps 1 For each case identify if there is a sequence where Approve Purchase Requisition is followed by Create Order which in turn is followed by Confirm Order with no other activities in between This requires us to order events within each case based on their timestamp 2 For such cases where this sequence exists check if the time between the Create Order and Confirm Order events is more than 5 days 3 Return all events from cases where either  The specified sequence does not appear consecutively  The specified sequence appears consecutively but the time between Create Order and Confirm Order is 5 days or less"
  },
  {
    "Name": "Hypothesis Generation - PE",
    "Text": "First let us identify the ordered sequence of events within each caseid We need to use window functions such as LEAD and LAG to check for the next and previous activities and timestamps based on the timestamp order"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "Step by step reasoning 1 For each caseid order the events by timestamp 2 Use LEAD function to get the next activity and its timestamp for each row ordered by timestamp within each caseid 3 Similarly use LEAD again to get the activity and timestamp two rows ahead for each row By using the LEAD function twice once for the next row and once for the row after that we can check if a row with activity equal to Approve Purchase Requisition is followed by a row where activity is Create Order which is in turn followed by a row where activity is Confirm Order Additionally if such a sequence is found we need to check that the timestamp difference between Create Order second row in the sequence and Confirm Order third row in the sequence is more than 5 days"
  },
  {
    "Name": "Hypothesis Generation - IND",
    "Text": "Let us construct a query that identifies such cases where the described sequence appears consecutively and the time between Create Order and Confirm Order is more than 5 days WITH orderedevents AS SELECT caseid activity timestamp ROWNUMBER OVER PARTITION BY caseid ORDER BY timestamp AS rownum FROM eventlog eventsequence AS SELECT oe1caseid oe1activity AS activity1 oe1timestamp AS timestamp1 oe2rownum AS rownum2 oe2activity AS activity2 oe2timestamp AS timestamp2 oe3rownum AS rownum3 oe3activity AS activity3 oe3timestamp AS timestamp3 FROM orderedevents oe1 JOIN orderedevents oe2 ON oe1caseid oe2caseid AND oe1rownum oe2rownum 1 JOIN orderedevents oe3 ON oe2caseid oe3caseid AND oe2rownum oe3rownum 1 WHERE oe1activity Approve Purchase Requisition AND oe2activity Create Order AND oe3activity Confirm Order filteredcases AS SELECT DISTINCT caseid FROM eventsequence WHERE timestamp3 timestamp2 INTERVAL 5 DAY SELECT e FROM eventlog e WHERE ecaseid NOT IN SELECT caseid FROM filteredcases"
  },
  {
    "Name": "Heuristic Reasoning - PE",
    "Text": "However a more common and efficient way to solve this might be by using the LEAD window function This allows us to check subsequent rows within a single row which makes it a bit more compact WITH orderedevents AS SELECT caseid activity timestamp LEADactivity OVER PARTITION BY caseid ORDER BY timestamp AS nextactivity LEADtimestamp OVER PARTITION BY caseid ORDER BY timestamp AS nexttimestamp LEADactivity 2 OVER PARTITION BY caseid ORDER BY timestamp AS nextnextactivity LEADtimestamp 2 OVER PARTITION BY caseid ORDER BY timestamp AS nextnexttimestamp FROM eventlog casestoexclude AS SELECT DISTINCT caseid FROM orderedevents WHERE activity Approve Purchase Requisition AND nextactivity Create Order AND nextnextactivity Confirm Order AND nextnexttimestamp nexttimestamp INTERVAL 5 DAY SELECT e FROM eventlog e WHERE ecaseid NOT IN SELECT caseid FROM casestoexclude"
  },
  {
    "Name": "Validation - PE",
    "Text": "Explanation 1 orderedevents CTE uses LEAD to get the next activity and timestamp nextactivity and nexttimestamp and the one after that nextnextactivity and nextnexttimestamp 2 casestoexclude CTE filters the orderedevents to find rows where the activity sequence is Approve Purchase Requisition Create Order and Confirm Order in that order ie activity is Approve Purchase Requisition nextactivity is Create Order and nextnextactivity is Confirm Order Additionally it checks if the time between nexttimestamp Create Order event and nextnexttimestamp Confirm Order event is greater than 5 days 3 The main query selects all events from eventlog where caseid is not in the casestoexclude CTE"
  },
  {
    "Name": "Validation - PE",
    "Text": "This query should thus return all events from cases that do not have the defined activity sequence where the time between Create Order and Confirm Order is more than 5 days"
  },
  {
    "Name": "Conclusion - C"
  }
]