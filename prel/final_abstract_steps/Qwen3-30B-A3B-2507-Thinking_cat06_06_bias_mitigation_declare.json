[
  {
    "Name": "Pattern Recognition - PE",
    "Text": "We are given a DECLARE model for a loan application process. The goal is to add constraints to prevent bias based on sensitive attributes (like ApplicantAge, ApplicantGender, ApplicantRace). We note that the example model already has some activities (StartApplication, RequestAdditionalInfo, FinalDecision) and we are to introduce new constraints."
  },
  {
    "Name": "Abductive Reasoning - PE",
    "Text": "Potential bias: We are concerned that decisions (like Reject) might be made too quickly after seeing sensitive attributes (e.g., CheckApplicantRace for a minority applicant) without proper review."
  },
  {
    "Name": "Hypothesis Generation - PE",
    "Text": "However, note: the DECLARE constraints do not have a way to condition on the attribute. We are only constraining the sequence of activities. Therefore, we have to assume that the process model is designed such that the sensitive attribute is captured in the activity names? Or we have to introduce new activities? But the problem says: you might add constraints that enforce that any decision activities cannot immediately follow or be preceded only by events where a sensitive attribute leads to a biased outcome. So we will assume that the process includes activities like: CheckApplicantRace, CheckApplicantGender, CheckApplicantAge"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "We are to add constraints that enforce: Coexistence: between a decision activity (e.g., Reject) and ManualReview when the decision is made for a sensitive applicant. ... So we add: coexistence: { CheckApplicantRace: { ManualReview: { support: 1.0, confidence: 1.0 } } }"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "However, the problem says: any decision activities cannot immediately follow or be preceded only by events where a sensitive attribute leads to a biased outcome. So we might also want to prevent a direct sequence from CheckApplicantRace to a decision (like Reject). We can use a nonsuccession constraint to prevent the immediate succession. So we can add a nonsuccession constraint: nonsuccession: { CheckApplicantRace: { Reject: { support: 1.0, confidence: 1.0 } } }"
  },
  {
    "Name": "Validation - PE",
    "Text": "But note: the example model has FinalDecision as a single activity. We don't have separate activities for Approve and Reject. So we have to assume that FinalDecision is the activity that represents the decision... The example model uses FinalDecision as a single activity. So we cannot distinguish between Approve and Reject. Therefore, we have to treat all decisions as FinalDecision. But then we cannot target Reject specifically."
  },
  {
    "Name": "Inductive Reasoning - PE",
    "Text": "However, note: the coexistence constraint does not require that ManualReview happens before the decision. So we might also add a precedence constraint: ManualReview must precede FinalDecision. ... So we can add: precedence: { ManualReview: { FinalDecision: {support: 1.0, confidence: 1.0} } } ... This is a good practice."
  },
  {
    "Name": "Inductive Reasoning - PE",
    "Text": "But note: the problem also mentions other sensitive attributes (ApplicantGender, ApplicantRace, ApplicantAge). We should cover all? ... Therefore, we add: For CheckApplicantRace: ... Similarly for CheckApplicantGender and CheckApplicantAge."
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "Now, let's write the updated model. We are going to add to the existing model: - In coexistence: add the three sensitive attribute checks with ManualReview. - In nonsuccession: add the three sensitive attribute checks with FinalDecision. - In precedence: add ManualReview to FinalDecision"
  },
  {
    "Name": "Conclusion - C"
  }
]