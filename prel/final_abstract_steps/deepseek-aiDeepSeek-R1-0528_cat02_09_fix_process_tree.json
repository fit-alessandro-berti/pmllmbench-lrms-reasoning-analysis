[
  {
    "Name": "Pattern Recognition - PE",
    "Text": "We are given a process tree that currently has the following structure Sequence 1 Create Purchase Requisition 2 Approve Purchase Requisition 3 PARALLEL block containing Create Purchase Order Receive Goods Receive Invoice Match Invoice to PO Pay Invoice 4 Close Case"
  },
  {
    "Name": "Pattern Recognition - PE",
    "Text": "The problem is that the parallel block allows the activities to occur in any order which is not acceptable for the domain"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "Lets break down the intended order 1 Create Purchase Requisition must be first 2 Approve Purchase Requisition must follow 1 3 Create Purchase Order must follow 2 since we need an approved requisition to create a PO 4 Receive Goods must follow 3 we can only receive goods for an existing PO 5 Receive Invoice can occur after PO creation But note we have to match the invoice to the PO so the PO must exist Also we cannot pay before matching 6 Match Invoice to PO requires both the PO and the invoice So it must come after both the PO creation and the invoice receipt Also it must come before payment 7 Pay Invoice must come after matching"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "Additionally note that step 4 Receive Goods and step 5 Receive Invoice can occur in any order relative to each other Actually the domain does not require one to happen before the other However both must happen before matching"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "But note the matching step requires the invoice and the PO and also the goods receipt Actually the matching step typically involves matching the invoice to the PO and the goods receipt note 3 way matching However the activity is named Match Invoice to PO so we might assume its only matching the invoice to the PO 2 way But even then we dont necessarily require the goods to be received However in the problem we have a step Receive Goods and the standard logic lists 4 Receive Goods 5 Receive Invoice 6 Match Invoice to PO So the matching step comes after both receiving goods and receiving the invoice Actually the matching step requires both the goods receipt and the invoice The problem doesnt specify but lets stick to the order given step 4 then 5 then 6 But note the standard logic says 4 Receive Goods 5 Receive Invoice 6 Match Invoice to PO This implies that matching happens after both However the standard logic does not specify whether goods and invoice can be received in any order In reality they can sometimes the invoice arrives before the goods sometimes after But the matching must wait until both are received"
  },
  {
    "Name": "Hypothesis Generation - PE",
    "Text": "Therefore we can allow Create Purchase Order must come first in the block after the requisition approval Then we can have the activities Receive Goods and Receive Invoice in any order But note they are independent However after both we must do the matching"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "Also note that the payment must come after matching and then the case closure"
  },
  {
    "Name": "Hypothesis Generation - PE",
    "Text": "So the corrected structure should be Sequence 1 Create Purchase Requisition 2 Approve Purchase Requisition 3 Create Purchase Order 4 Now we have two events that can occur in any order Receive Goods and Receive Invoice But note they are independent However after both we must do the matching 5 Then we must have Match Invoice to PO which requires both the goods and the invoice 6 Then Pay Invoice 7 Then Close Case"
  },
  {
    "Name": "Heuristic Reasoning - PE",
    "Text": "But wait what about the possibility that the goods are received before the invoice Or vice versa We can model the two receives in parallel Actually we can use an AND parallel for the two receives But note they dont have to be in parallel they can be sequential in any order So we can use a parallel block for just the two receives However the problem says the process tree should enforce the proper order We want both receives to happen but we dont care which one first"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "Alternatively we can use an XOR loop No because both are required So we must have both Therefore we can use a parallel block for the two receives But note the matching step requires both So we can have Sequence Create PO Parallel Receive Goods Receive Invoice Match Invoice to PO Pay Invoice"
  },
  {
    "Name": "Heuristic Reasoning - IND",
    "Text": "But wait is it possible that the goods are never received Or the invoice never received Then the process would get stuck However the domain requires both So we assume both will happen"
  },
  {
    "Name": "Counterfactual Reasoning - PE",
    "Text": "Alternatively we can model the two receives as a sequence But that would force an order either goods then invoice or invoice then goods But the domain allows both orders So parallel is acceptable"
  },
  {
    "Name": "Deductive Reasoning - PE",
    "Text": "However note the standard logic lists 4 Receive Goods 5 Receive Invoice But that doesnt necessarily mean they are sequential They are two steps that must occur but the order is not fixed So parallel is acceptable"
  },
  {
    "Name": "Validation - PE",
    "Text": "But what about the matching It must wait for both So the parallel block for the two receives and then the matching is correct"
  },
  {
    "Name": "Hypothesis Generation - PE",
    "Text": "Therefore the corrected process tree should be Sequence 1 Create Purchase Requisition 2 Approve Purchase Requisition 3 Create Purchase Order 4 A parallel block for Receive Goods Receive Invoice 5 Match Invoice to PO 6 Pay Invoice 7 Close Case"
  },
  {
    "Name": "Pattern Recognition - IND",
    "Text": "But note the original model had a parallel block that included Create PO the two receives matching and payment We are now breaking that apart"
  },
  {
    "Name": "Hypothesis Generation - PE",
    "Text": "So the entire corrected tree root Sequence create req approve req create po Parallel receive goods receive invoice match invoice pay invoice close case"
  },
  {
    "Name": "Validation - PE",
    "Text": "However let me double check is there any dependency that forces Create PO to be before the two receives Yes because we cannot receive goods without a PO and we cannot receive an invoice without a PO the invoice references the PO So Create PO must be before the two receives Actually we can have Create PO and then the two receives in any order But note the two receives depend on the PO existing So Create PO must be before both receives Therefore we cannot have Create PO in parallel with the two receives It must be sequential first Create PO then the two receives in any order"
  },
  {
    "Name": "Validation - PE",
    "Text": "So the above structure is correct"
  },
  {
    "Name": "Validation - PE",
    "Text": "But what if the invoice is received before the goods That is acceptable Yes Similarly goods before invoice Also acceptable"
  },
  {
    "Name": "Validation - PE",
    "Text": "Now what about matching It must come after both receives And payment after matching"
  },
  {
    "Name": "Hypothesis Generation - PE",
    "Text": "Explanation 1 The sequence starts with creating and approving the requisition steps 1 and 2 2 Then the purchase order is created step 3 3 Next the process requires both the goods and the invoice to be received step 4 and 5 These two can occur in any order parallel because the domain does not require one before the other However both must be completed before moving to the next step 4 After both receives are done the invoice is matched to the PO step 6 5 Then the invoice is paid step 7 6 Finally the case is closed step 8"
  },
  {
    "Name": "Validation - PE",
    "Text": "This model prevents unwanted behavior It is not possible to receive goods or the invoice before the purchase order is created because they are in a sequence after the create po step It is not possible to match the invoice until both the goods and the invoice are received because the matching step is after the parallel block which requires both to complete It is not possible to pay the invoice before matching because the payment step is after the matching step The case cannot be closed until the payment is done Thus the model enforces the correct order and dependencies"
  },
  {
    "Name": "Conclusion - C"
  }
]